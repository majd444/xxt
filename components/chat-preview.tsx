"use client"

import { useState } from "react"

interface ChatPreviewProps {
  chatbotName: string
  _systemPrompt?: string // Renamed to indicate it's not used directly in preview
  topColor?: string
  accentColor?: string
  backgroundColor?: string
  conversationStarters?: string[]
  onRemoveStarter?: (index: number) => void
}

export default function ChatPreview({
  chatbotName = "AI Assistant",
  _systemPrompt = "You are a helpful AI assistant.", // Not used directly in preview, but passed to the actual AI
  topColor = "#1f2937",
  accentColor = "#3B82F6",
  backgroundColor = "#F3F4F6",
  conversationStarters = [],
  onRemoveStarter = () => {}, // Default no-op function if not provided
}: ChatPreviewProps) {
  const [messages, setMessages] = useState<Array<{ role: 'user' | 'assistant', content: string }>>([
    { role: 'assistant', content: `Hi, I'm ${chatbotName}! I can help with information, answer questions, or just chat.` },
  ])
  const [input, setInput] = useState("")
  const [showStarters, setShowStarters] = useState(true)

  // Function to add a new message
  const addMessage = (role: 'user' | 'assistant', content: string) => {
    setMessages(prev => [...prev, { role, content }])
  }

  // Function to handle sending a message
  const handleSend = (text: string = input) => {
    if (!text.trim()) return
    
    // Add user message
    addMessage('user', text)
    setInput("")
    
    // Hide starters after first message
    setShowStarters(false)
    
    // Simulate AI response
    setTimeout(() => {
      addMessage('assistant', "This is a preview of how the assistant will respond. The actual response will be generated by the AI based on the system prompt and user input.")
    }, 1000)
  }

  return (
    <div className="flex flex-col h-full overflow-hidden" style={{ backgroundColor }}>
      {/* Chat Header */}
      <div className="p-4 flex items-center border-b" style={{ backgroundColor: topColor, color: 'white' }}>
        <div className="w-8 h-8 rounded-full bg-white flex items-center justify-center text-gray-800 font-bold mr-3">
          A
        </div>
        <div className="font-semibold">{chatbotName}</div>
        <div className="ml-auto flex items-center space-x-2">
          <button className="text-white rounded-full p-1 hover:bg-white/10">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M12 16v-4"/><path d="M12 8h.01"/></svg>
          </button>
          <button className="text-white rounded-full p-1 hover:bg-white/10">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M5 12h14"/><path d="M12 5v14"/></svg>
          </button>
        </div>
      </div>
      
      {/* Chat Messages */}
      <div className="flex-1 p-4 overflow-y-auto space-y-4">
        {messages.map((msg, index) => (
          <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div 
              className={`max-w-[80%] rounded-lg p-3 ${
                msg.role === 'user' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-200 text-gray-800'
              }`}
              style={msg.role === 'user' ? { backgroundColor: accentColor } : {}}
            >
              {msg.content}
            </div>
          </div>
        ))}
      </div>
      
      {/* Conversation Starters */}
      {showStarters && conversationStarters.length > 0 && (
        <div className="px-4 py-2 space-y-2">
          <p className="text-sm text-gray-500">Start a conversation:</p>
          <div className="flex flex-wrap gap-2">
            {conversationStarters.map((starter, index) => (
              <div key={index} className="flex items-center">
                <button
                  id={`conversation-starter-${index}`}
                  name={`conversation-starter-${index}`}
                  onClick={() => handleSend(starter)}
                  className="px-3 py-1.5 rounded-full text-sm border border-gray-300 hover:bg-gray-100 flex items-center gap-2"
                >
                  <span>{starter}</span>
                  <span 
                    onClick={(e) => {
                      e.stopPropagation(); // Prevent triggering the parent button's onClick
                      onRemoveStarter(index);
                    }}
                    className="ml-1 text-gray-500 hover:text-gray-800 font-bold"
                  >
                    Ã—
                  </span>
                </button>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Input Area */}
      <div className="p-4 border-t flex items-end">
        <textarea
          id="chat-preview-input"
          name="chat-preview-message"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your message..."
          className="flex-1 border rounded-lg p-2 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
          rows={1}
          style={{ maxHeight: "100px" }}
        />
        <button
          onClick={() => handleSend()}
          className="ml-2 p-2 rounded-full"
          style={{ backgroundColor: accentColor, color: 'white' }}
          disabled={!input.trim()}
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M5 12h14"/><path d="m12 5 7 7-7 7"/></svg>
        </button>
      </div>
    </div>
  )
}
