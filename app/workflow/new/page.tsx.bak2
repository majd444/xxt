"use client"
"use client"

import { useState, useRef } from "react"
import type React from "react"

import {
  ArrowRight,
  Files,
  FileText,
  GripVertical,
  LoaderCircle,
  MessageCircle,
  MessageSquare,
  Plus,
  Save,
  Settings,
  PenTool,
  X,
  Send
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Card } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ChatInterface } from "@/components/chat-interface"
import { ToolsInterface } from "@/components/tools-interface"
import { WorkflowChatPreview } from "@/components/workflow-chat-preview"

type ComponentType = "conversation" | "tools" | "prompt"
type Position = { x: number; y: number }

type ConditionType = "if" | "else" | "and" | "or" | null

interface Connection {
  id: string
  from: string
  to: string
  condition: ConditionType
  value?: string
}

interface WorkflowComponent {
  id: string
  type: ComponentType
  position: Position
  title: string
  toolId?: string
}

export default function NewWorkflowPage() {
  const [components, setComponents] = useState<WorkflowComponent[]>([])
  const [activeComponent, setActiveComponent] = useState<string | null>(null)
  const [startPosition, setStartPosition] = useState<Position | null>(null)
  const [connections, setConnections] = useState<Connection[]>([])
  const [selectedConnection, setSelectedConnection] = useState<string | null>(null)
  const [draggingConnection, setDraggingConnection] = useState<{ from: string; sourcePosition: Position; currentPosition: Position } | null>(null)
  const [conditionType, setConditionType] = useState<ConditionType>(null)
  const [conditionValue, setConditionValue] = useState("")
  const [showSidePanel, setShowSidePanel] = useState(true)
  const [showAgentModal, setShowAgentModal] = useState(false)
  const [selectedToolIds, setSelectedToolIds] = useState<Record<string, string>>({}) // componentId -> toolId
  const [conversationTexts, setConversationTexts] = useState<Record<string, string>>({}) // componentId -> conversation text
  const [isSaving, setIsSaving] = useState(false)
  const [workflowName, setWorkflowName] = useState("My Workflow")
  const [saveError, setSaveError] = useState<string | null>(null)
  const [saveSuccess, setSaveSuccess] = useState<boolean>(false)
  const [savedWorkflowId, setSavedWorkflowId] = useState<string | null>(null)
  const [savingAgent, setSavingAgent] = useState(false)
  const [agentName, setAgentName] = useState("")
  const [agentDescription, setAgentDescription] = useState("")
  const [showChatPreview, setShowChatPreview] = useState(false)
  const [chatbotName, _setChatbotName] = useState("AI Assistant")
  const [systemPrompt, _setSystemPrompt] = useState("You are a helpful AI assistant.")
  const [topColor, _setTopColor] = useState("#1f2937")
  const [accentColor, _setAccentColor] = useState("#3B82F6")
  const [backgroundColor, _setBackgroundColor] = useState("#F3F4F6")
  const [temperature, _setTemperature] = useState(0.7)
  const [model, _setModel] = useState("gpt-4")
  const [maxTokens, _setMaxTokens] = useState(2000)
  
  const workflowRef = useRef<HTMLDivElement>(null)

  const addComponent = (type: ComponentType) => {
    const id = `${type}-${Date.now()}`
    const newComponent = {
      id,
      type,
      position: { x: 100, y: 100 + components.length * 120 },
      title: getComponentTitle(type),
    }
    
    // Initialize empty conversation text for conversation components
    if (type === "conversation") {
      setConversationTexts(prev => ({
        ...prev,
        [id]: ""
      }))
    }
    
    setComponents([...components, newComponent])
  }

  const getComponentTitle = (type: ComponentType) => {
    switch (type) {
      case "conversation":
        return "Conversation Starter"
      case "tools":
        return "Tools"
      case "prompt":
        return "Prompt"
      default:
        return "Component"
    }
  }

  const getComponentIcon = (type: ComponentType) => {
    switch (type) {
      case "conversation":
        return <MessageSquare />
      case "tools":
        return <PenTool />
      case "prompt":
        return <FileText />
      default:
        return null
    }
  }

  const handleMouseDown = (e: React.MouseEvent, id: string) => {
    setActiveComponent(id)
    const component = components.find((c) => c.id === id)
    if (component) {
      const rect = (e.target as HTMLElement).getBoundingClientRect()
      setStartPosition({
        x: e.clientX - rect.left,
        y: e.clientY - rect.top,
      })
    }
  }

  const handleMouseMove = (e: React.MouseEvent) => {
    if (activeComponent && startPosition && workflowRef.current) {
      const workflowRect = workflowRef.current.getBoundingClientRect()
      const newX = e.clientX - workflowRect.left - startPosition.x
      const newY = e.clientY - workflowRect.top - startPosition.y

      setComponents(
        components.map((component) =>
          component.id === activeComponent ? { ...component, position: { x: newX, y: newY } } : component,
        ),
      )
    }

    if (draggingConnection && workflowRef.current) {
      const workflowRect = workflowRef.current.getBoundingClientRect()
      setDraggingConnection({
        ...draggingConnection,
        currentPosition: {
          x: e.clientX - workflowRect.left,
          y: e.clientY - workflowRect.top,
        },
      })
    }
  }

  const handleMouseUp = (e: React.MouseEvent) => {
    if (draggingConnection) {
      e.stopPropagation()
      // We're dropping a dragged connection without completing it
      setDraggingConnection(null)
    }
    
    setActiveComponent(null)
    setStartPosition(null)
  }

  const handleConnectionStart = (e: React.MouseEvent, fromId: string, point: "top" | "bottom") => {
    e.stopPropagation()
    if (workflowRef.current) {
      const rect = workflowRef.current.getBoundingClientRect()
      // Find the source component
      const fromComponent = components.find(c => c.id === fromId)
      if (!fromComponent) return
      
      // Get the exact position based on the connection point
      const sourcePosition = {
        x: fromComponent.position.x + 150, // Center of the component
        y: point === "top" 
          ? fromComponent.position.y // Top of the component
          : fromComponent.position.y + 100, // Bottom of the component (approximation)
      }
      
      // Set both source position and current mouse position
      setDraggingConnection({
        from: fromId,
        sourcePosition,
        currentPosition: {
          x: e.clientX - rect.left,
          y: e.clientY - rect.top,
        },
      })
    }
  }

  // Connection line dragging is already handled in the handleMouseMove function above
  
  const handleCompleteConnection = (e: React.MouseEvent, toId: string) => {
    e.stopPropagation()
    if (draggingConnection && draggingConnection.from !== toId) {
      // Create a new connection with a unique ID and null condition
      const newConnection: Connection = {
        id: crypto.randomUUID(),
        from: draggingConnection.from,
        to: toId,
        condition: null
      }
      setConnections([...connections, newConnection])
      setDraggingConnection(null)
    }
  }

  const handleConnectionClick = (connectionId: string) => {
    const connection = connections.find(conn => conn.id === connectionId)
    if (connection) {
      // Initialize the form state with the current values
      setConditionType(connection.condition)
      setConditionValue(connection.value || "")
      setSelectedConnection(connectionId)
    }
  }

  const handleConnectionDoubleClick = (connectionId: string) => {
    setConnections(connections.filter(conn => conn.id !== connectionId))
    if (selectedConnection === connectionId) {
      setSelectedConnection(null)
    }
  }

  const saveConnectionCondition = () => {
    if (!selectedConnection) return

    setConnections(connections.map(conn => 
      conn.id === selectedConnection 
        ? { ...conn, condition: conditionType, value: conditionValue } 
        : conn
    ))
    
    // Reset and close the modal
    setSelectedConnection(null)
    setConditionType(null)
    setConditionValue("")
  }
  
  const getConnectionPoints = (fromId: string, toId: string) => {
    const fromComponent = components.find((c) => c.id === fromId)
    const toComponent = components.find((c) => c.id === toId)

    if (!fromComponent || !toComponent) return null

    const fromX = fromComponent.position.x + 150 // center of component
    const fromY = fromComponent.position.y + 100 // bottom of component
    const toX = toComponent.position.x + 150 // center of component
    const toY = toComponent.position.y // top of component

    return { fromX, fromY, toX, toY }
  }

  const handleToolSelect = (componentId: string, tool: any) => {
    // Use a single batch update to avoid multiple renders
    const updatedComponents = [...components];
    const componentIndex = updatedComponents.findIndex(comp => comp.id === componentId);
    
    if (componentIndex === -1) return;
    
    // Update the selected tool for this component
    if (tool) {
      setSelectedToolIds(prev => ({
        ...prev,
        [componentId]: tool.id
      }));
      
      // Update the component in our local copy
      updatedComponents[componentIndex] = {
        ...updatedComponents[componentIndex],
        title: tool.name,
        toolId: tool.id
      };
    } else {
      // Reset to default tools view
      setSelectedToolIds(prev => {
        const newState = {...prev};
        delete newState[componentIndex];
        return newState;
      });
      
      // Reset the component in our local copy
      updatedComponents[componentIndex] = {
        ...updatedComponents[componentIndex],
        title: "Tools",
        toolId: undefined
      };
    }
    
    // Set the updated components all at once
    setComponents(updatedComponents);
  }
  
  // Save workflow to database
  const saveWorkflow = async () => {
    setIsSaving(true);
    setSaveError(null);
    setSaveSuccess(false);
    
    try {
      // Get the current user ID from session or use a default one
      // This should be replaced with proper authentication
      const userId = "default-user";
      
      const workflowData = {
        name: workflowName,
        description: "Created with Workflow Builder",
        components,
        connections,
        conversationTexts,
        selectedToolIds,
        userId,
        // Chatbot configuration
        chatbotName,
        systemPrompt,
        // Style configuration
        topColor,
        accentColor,
        backgroundColor,
        // Fine tuning configuration
        temperature,
        model,
        maxTokens,
        // Additional configuration can be stored here
        extraConfig: {}
      };
      
      // Call the API to save the workflow
      const response = await fetch('/api/workflows', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(workflowData),
      });
      
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.error || 'Failed to save workflow');
      }
      
      // Store the saved workflow ID
      if (result.workflowId) {
        setSavedWorkflowId(result.workflowId);
      }
      
      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 3000); // Clear success message after 3 seconds
      
    } catch (error) {
      console.error('Error saving workflow:', error);
      setSaveError(typeof error === 'string' ? error : (error as Error).message || 'An error occurred');
    } finally {
      setIsSaving(false);
    }
  };
  
  // Save as agent functionality
  const saveAsAgent = async () => {
    if (!savedWorkflowId) {
      // Save the workflow first
      await saveWorkflow();
      // If there's an error, it will be shown by the saveWorkflow function
      if (!savedWorkflowId) {
        setShowAgentModal(false);
        return;
      }
    }
    
    setSavingAgent(true);
    try {
      const userId = "default-user";
      
      const agentData = {
        name: agentName || workflowName,
        description: agentDescription || "Created from workflow: " + workflowName,
        workflowId: savedWorkflowId,
        userId,
        // Chatbot configuration
        chatbotName,
        systemPrompt,
        // Style configuration
        topColor,
        accentColor,
        backgroundColor,
        // Fine tuning configuration
        temperature,
        model,
        maxTokens
      };
      
      // Call the API to save the agent
      const response = await fetch('/api/agents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(agentData),
      });
      
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.error || 'Failed to create agent');
      }
      
      // Redirect to the agents page on success
      window.location.href = "/agents";
      
    } catch (error) {
      console.error('Error creating agent:', error);
      setSaveError(typeof error === 'string' ? error : (error as Error).message || 'An error occurred creating agent');
    } finally {
      setSavingAgent(false);
      setShowAgentModal(false);
    }
  };
  
  return (
    <div className="flex flex-col h-screen bg-white" onMouseMove={handleMouseMove} onMouseUp={handleMouseUp}>
      {/* Header */}
      <header className="bg-blue-600 text-white flex items-center justify-between px-6 py-4">
        {/* Left side: Logo and title */}
        <div className="flex items-center space-x-2">
          <FileText className="h-6 w-6 text-white" />
          <span className="text-lg font-semibold text-white">Workflow Builder</span>
        </div>

        {/* Center: Start button */}
        <div className="absolute left-1/2 transform -translate-x-1/2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="outline"
                className="border-dashed border-white text-white bg-transparent hover:bg-blue-700 hover:text-white"
              >
                start <Plus className="ml-1 h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => addComponent("conversation")}>
                <MessageCircle className="mr-2 h-4 w-4" />
                Conversation Starter
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => addComponent("tools")}>
                <Tool className="mr-2 h-4 w-4" />
                Tools
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => addComponent("prompt")}>
                <FileText className="mr-2 h-4 w-4" />
                Prompt
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>

        {/* Right side: Action buttons */}
        <div className="flex items-center gap-3">
          {/* Workflow Name Input */}
          <div className="relative">
            <input
              type="text"
              value={workflowName}
              onChange={(e) => setWorkflowName(e.target.value)}
              className="bg-blue-500 text-white border-b border-white py-1 px-2 focus:outline-none focus:border-b-2 max-w-[140px]"
              placeholder="Workflow Name"
            />
          </div>
          
          {/* Save Button */}
          <Button 
            variant="ghost" 
            className="text-white hover:bg-blue-700"
            onClick={saveWorkflow}
            disabled={isSaving}
          >
            {isSaving ? (
              <>
                <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                saving...
              </>
            ) : (
              <>
                <Save className="mr-2 h-4 w-4" />
                save
              </>
            )}
          </Button>
          
          {/* Create Agent Button - Only appears after workflow is saved */}
          {savedWorkflowId && (
            <Button
              variant="ghost"
              className="text-white hover:bg-blue-700"
              onClick={() => setShowAgentModal(true)}
            >
              Create Agent
            </Button>
          )}
          
          {/* Save Status Message */}
          {saveSuccess && (
            <div className="absolute top-14 right-40 bg-green-500 text-white px-3 py-2 rounded shadow-md z-50">
              Workflow saved successfully!
            </div>
          )}
          
          {saveError && (
            <div className="absolute top-14 right-40 bg-red-500 text-white px-3 py-2 rounded shadow-md z-50">
              {saveError}
            </div>
          )}

          {/* Toggle Chat Preview Button */}
          <Button 
            variant="ghost" 
            className="text-white hover:bg-blue-700"
            onClick={() => setShowSidePanel(!showSidePanel)}
          >
            <MessageSquare className="mr-2 h-4 w-4" />
            {showSidePanel ? "hide preview" : "show preview"}
          </Button>

          {/* Back Button */}
          <Button 
            variant="ghost" 
            size="icon"
            className="text-white hover:bg-blue-700 h-10 w-10"
            onClick={() => window.location.href = "/"}
          >
            <ArrowRight className="h-5 w-5" />
          </Button>
        </div>
      </header>

      <main className="flex-1 flex overflow-hidden">
        {/* Main Workflow Area - Adjusts width based on side panel visibility */}
        <div 
          className={`${showSidePanel ? 'w-2/3' : 'w-full'} relative overflow-hidden transition-all duration-300 ease-in-out`}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          ref={workflowRef}
        >
          {/* Agent Creation Modal */}
          {showAgentModal && (
            <div className="absolute inset-0 bg-black/50 flex items-center justify-center z-50" onClick={() => setShowAgentModal(false)}>
              <div className="bg-white rounded-lg shadow-lg w-full max-w-md p-6" onClick={(e) => e.stopPropagation()}>
                <h2 className="text-xl font-bold mb-4">Create AI Agent</h2>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">Agent Name</label>
                    <input
                      type="text"
                      value={agentName}
                      onChange={(e) => setAgentName(e.target.value)}
                      placeholder={workflowName}
                      className="w-full border rounded p-2"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">Description</label>
                    <textarea
                      value={agentDescription}
                      onChange={(e) => setAgentDescription(e.target.value)}
                      placeholder="Describe what this agent does"
                      className="w-full border rounded p-2 min-h-[100px]"
                    />
                  </div>
                  
                  <div className="pt-4 border-t flex justify-end space-x-3">
                    <Button variant="outline" onClick={() => setShowAgentModal(false)}>Cancel</Button>
                    <Button onClick={saveAsAgent} disabled={savingAgent}>
                      {savingAgent ? (
                        <>
                          <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                          Creating...
                        </>
                      ) : (
                        'Create Agent'
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Main workflow area */}
          <div className={`${showSidePanel ? 'w-2/3' : 'w-full'} relative overflow-hidden transition-all duration-300 ease-in-out`} ref={workflowRef}>
            {components.length === 0 ? (
              <div className="flex items-center justify-center h-full">
                <p className="text-gray-500 text-center">
                  Click the "start +" button and select an option from the dropdown
                </p>
              </div>
            ) : (
              <>
                {/* SVG for connections */}
                <svg className="absolute inset-0 w-full h-full">
                  {/* Permanent connections using straight lines */}
                  {connections.map((connection) => {
                    const points = getConnectionPoints(connection.from, connection.to)
                    if (!points) return null

                    const { fromX, fromY, toX, toY } = points
                    
                    // Calculate midpoint for displaying condition text
                    const midX = (fromX + toX) / 2
                    const midY = (fromY + toY) / 2

                    return (
                      <g key={connection.id}>
                        {/* Invisible thicker line for better click target */}
                        <line
                          x1={fromX}
                          y1={fromY}
                          x2={toX}
                          y2={toY}
                          stroke="transparent"
                          strokeWidth="10"
                          style={{ cursor: 'pointer' }}
                          onClick={(e) => {
                            e.stopPropagation()
                            handleConnectionClick(connection.id)
                          }}
                          onDoubleClick={(e) => {
                            e.stopPropagation()
                            handleConnectionDoubleClick(connection.id)
                          }}
                        />
                        {/* Visible line */}
                        <line
                          x1={fromX}
                          y1={fromY}
                          x2={toX}
                          y2={toY}
                          stroke="#3B82F6"
                          strokeWidth="2"
                          pointerEvents="none"
                        />
                        {/* Condition badge if condition exists */}
                        {connection.condition && (
                          <g pointerEvents="none">
                            {/* Badge for condition */}
                            <rect
                              x={midX - 25}
                              y={midY - 15}
                              width={connection.value ? 70 : 50}
                              height="30"
                              rx="4"
                              fill="#3B82F6"
                            />
                            {/* Display condition text */}
                            <text
                              x={midX}
                              y={midY - 2}
                              textAnchor="middle"
                              fill="white"
                              fontSize="10"
                              fontWeight="bold"
                            >
                              {connection.condition.toUpperCase()}
                            </text>
                            
                            {/* Display value if exists */}
                            {connection.value && (
                              <text
                                x={midX}
                                y={midY + 10}
                                textAnchor="middle"
                                fill="white"
                                fontSize="8"
                              >
                                {connection.value}
                              </text>
                            )}
                          </g>
                        )}
                      </g>
                    )
                  })}

                  {/* Dragging connection preview with dashed straight line */}
                  {draggingConnection && (
                    <>
                      <line
                        x1={draggingConnection.sourcePosition.x}
                        y1={draggingConnection.sourcePosition.y}
                        x2={draggingConnection.currentPosition.x}
                        y2={draggingConnection.currentPosition.y}
                        stroke="#3B82F6"
                        strokeWidth="2"
                        strokeDasharray="5,5"
                        pointerEvents="none"
                      />
                      {/* Blue circle that follows the mouse cursor */}
                      <circle
                        cx={draggingConnection.currentPosition.x}
                        cy={draggingConnection.currentPosition.y}
                        r="4"
                        fill="#3B82F6"
                        pointerEvents="none"
                      />
                    </>
                  )}
                </svg>
                
                {/* Components */}
                {components.map((component) => {
                  return component.type === "tools" ? (
                    <div
                      key={component.id}
                      className="absolute"
                      style={{
                        left: `${component.position.x}px`,
                        top: `${component.position.y}px`,
                        zIndex: activeComponent === component.id ? 10 : 1,
                      }}
                      onMouseDown={(e) => handleMouseDown(e, component.id)}
                    >
                      <div
                        className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 bg-[#3C82F6] rounded-full cursor-pointer"
                        onMouseUp={(e) => draggingConnection && handleCompleteConnection(e, component.id)}
                      />
                      <ToolsInterface 
                        selectedToolId={selectedToolIds[component.id]} 
                        onToolSelect={(tool) => handleToolSelect(component.id, tool)}
                        componentId={component.id}
                      />
                      <div
                        className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 w-4 h-4 bg-[#3C82F6] rounded-full cursor-pointer"
                        onMouseDown={(e) => handleConnectionStart(e, component.id, "bottom")}
                      />
                    </div>
                  ) : (
                    <Card
                      key={component.id}
                      className="absolute w-[300px] p-4 cursor-move shadow-md"
                      style={{
                        left: `${component.position.x}px`,
                        top: `${component.position.y}px`,
                        zIndex: activeComponent === component.id ? 10 : 1,
                      }}
                      onMouseDown={(e) => handleMouseDown(e, component.id)}
                    >
                      {component.type !== "conversation" && (
                        <div
                          className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 bg-blue-500 rounded-full cursor-pointer"
                          onMouseUp={(e) => draggingConnection && handleCompleteConnection(e, component.id)}
                        />
                      )}
                      <div className="flex items-center mb-2">
                        <div className="mr-2 text-blue-500">{getComponentIcon(component.type)}</div>
                        <div className="font-medium flex-1">{component.title}</div>
                        <GripVertical className="h-4 w-4 text-gray-400" />
                      </div>
                      {component.type === "conversation" && (
                        <div className="bg-gray-50 p-2 rounded-md text-sm">
                          <textarea
                            className="w-full min-h-[60px] bg-transparent border-none focus:outline-none focus:ring-1 focus:ring-blue-400 rounded p-1"
                            value={conversationTexts[component.id] || ""}
                            onChange={(e) => setConversationTexts(prev => ({
                              ...prev,
                              [component.id]: e.target.value
                            }))}
                            placeholder="Enter conversation starter text..."
                          />
                        </div>
                      )}
                      {component.type === "prompt" && (
                        <div className="bg-gray-50 p-2 rounded-md text-sm">
                          <div>Add a custom prompt</div>
                        </div>
                      )}
                      <div
                        className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 w-4 h-4 bg-blue-500 rounded-full cursor-pointer"
                        onMouseDown={(e) => handleConnectionStart(e, component.id, "bottom")}
                      />
                    </Card>
                  );
                })}
              </>
            )}
          </div>
        
        {/* Chat Preview Side Panel */}
        {showSidePanel && (
          <div className="w-1/3 border-l border-gray-200 p-4 overflow-auto flex flex-col">
            <div className="sticky top-4 flex flex-col flex-1">
              <h3 className="text-lg font-semibold mb-4">Chat Preview</h3>
              
              {/* Chat Preview Box */}
              <div className="bg-white rounded-lg border shadow-sm overflow-hidden h-[500px] flex flex-col">
                <WorkflowChatPreview
                  chatbotName={chatbotName}
                  _systemPrompt={systemPrompt}
                  topColor={topColor}
                  accentColor={accentColor}
                  backgroundColor={backgroundColor}
                  conversationStarters={Object.values(conversationTexts).filter(text => typeof text === 'string' && text.trim() !== '')}
                />
              </div>
              
              {/* Color Controls for Chat Appearance */}
              <div className="mt-6 p-4 border rounded-lg bg-white space-y-4">
                <h3 className="font-medium">Chat Appearance</h3>
                
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Header Color</label>
                  <div className="flex items-center gap-2">
                    <input 
                      type="color" 
                      value={topColor} 
                      onChange={(e) => _setTopColor(e.target.value)} 
                      className="w-8 h-8 rounded border" 
                    />
                    <input 
                      type="text" 
                      value={topColor} 
                      onChange={(e) => _setTopColor(e.target.value)} 
                      className="flex-1 text-sm border rounded px-2 py-1" 
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Button Color</label>
                  <div className="flex items-center gap-2">
                    <input 
                      type="color" 
                      value={accentColor} 
                      onChange={(e) => _setAccentColor(e.target.value)} 
                      className="w-8 h-8 rounded border" 
                    />
                    <input 
                      type="text" 
                      value={accentColor} 
                      onChange={(e) => _setAccentColor(e.target.value)} 
                      className="flex-1 text-sm border rounded px-2 py-1" 
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Background Color</label>
                  <div className="flex items-center gap-2">
                    <input 
                      type="color" 
                      value={backgroundColor} 
                      onChange={(e) => _setBackgroundColor(e.target.value)} 
                      className="w-8 h-8 rounded border" 
                    />
                    <input 
                      type="text" 
                      value={backgroundColor} 
                      onChange={(e) => _setBackgroundColor(e.target.value)} 
                      className="flex-1 text-sm border rounded px-2 py-1" 
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
          </div>
        </div>
        
        {/* Chat Preview Side Panel */}
        {showSidePanel && (
          <div className="w-1/3 border-l border-gray-200 p-4 overflow-auto flex flex-col">
            <div className="sticky top-4 flex flex-col flex-1">
              <h3 className="text-lg font-semibold mb-4">Chat Preview</h3>
              
              {/* Chat Preview Box */}
              <div className="bg-white rounded-lg border shadow-sm overflow-hidden h-[500px] flex flex-col">
                <WorkflowChatPreview
                  chatbotName={chatbotName}
                  _systemPrompt={systemPrompt}
                  topColor={topColor}
                  accentColor={accentColor}
                  backgroundColor={backgroundColor}
                  conversationStarters={Object.values(conversationTexts).filter(text => typeof text === 'string' && text.trim() !== '')}
                />
              </div>
              
              {/* Color Controls for Chat Appearance */}
              <div className="mt-6 p-4 border rounded-lg bg-white space-y-4">
                <h3 className="font-medium">Chat Appearance</h3>
                
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Header Color</label>
                  <div className="flex items-center gap-2">
                    <input 
                      type="color" 
                      value={topColor} 
                      onChange={(e) => _setTopColor(e.target.value)} 
                      className="w-8 h-8 rounded border" 
                    />
                    <input 
                      type="text" 
                      value={topColor} 
                      onChange={(e) => _setTopColor(e.target.value)} 
                      className="flex-1 text-sm border rounded px-2 py-1" 
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Button Color</label>
                  <div className="flex items-center gap-2">
                    <input 
                      type="color" 
                      value={accentColor} 
                      onChange={(e) => _setAccentColor(e.target.value)} 
                      className="w-8 h-8 rounded border" 
                    />
                    <input 
                      type="text" 
                      value={accentColor} 
                      onChange={(e) => _setAccentColor(e.target.value)} 
                      className="flex-1 text-sm border rounded px-2 py-1" 
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Background Color</label>
                  <div className="flex items-center gap-2">
                    <input 
                      type="color" 
                      value={backgroundColor} 
                      onChange={(e) => _setBackgroundColor(e.target.value)} 
                      className="w-8 h-8 rounded border" 
                    />
                    <input 
                      type="text" 
                      value={backgroundColor} 
                      onChange={(e) => _setBackgroundColor(e.target.value)} 
                      className="flex-1 text-sm border rounded px-2 py-1" 
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  )
}
